AWSTemplateFormatVersion: 2010-09-09
Description:              APIX.Hub is an API document store for registering, discovering and accessing APIs, based on Open API standards (Swagger specification)

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: "AD Configuration"
        Parameters:
          - ADServerAddress
          - ADUseSSL
          - ADSearchRoot
          - ADServiceAccountUserDN
          - ADServiceAccountPassword
      - Label:
          default: "SuperUser Configuration"
        Parameters:
          - SuperUserEMAIL
          - SuperUserFirstName
          - SuperUserLastName
      - Label:
          default: "SecurityGroup Configuration"
        Parameters:
          - LoadBalancerCIDR

Parameters:
  ADServerAddress:
    Type:        String
    Description: "This setting is the address (IP, DNS Name, or URL) for the LDAP server of your organization. For example ldaps://ldap.company.com:636"

  ADUseSSL:
    Type:        String
    AllowedValues:
      - "True"
      - "False"
    Default:     "True"
    Description: "This setting allows for enabling SSL for the ldap connection to your server's organization. Default is true."

  SuperUserEMAIL:
    Type:        String
    Description: "This is the email of the user which already exists in your organization's AD. This user will be configured as administrator in APIX.Hub"

  SuperUserFirstName:
    Type:        String
    Description: "This is the FirstName of the user which already exists in your organization's AD. This user will be configured as administrator in APIX.Hub"

  SuperUserLastName:
    Type:        String
    Description: "This is the LastName of the user which already exists in your organization's AD. This user will be configured as administrator in APIX.Hub"

  ADSearchRoot:
    Type:        String
    Description: "This is the node in the Active Directory Domain Services hierarchy where the search starts. For example 'DC=company,DC=com'"

  ADServiceAccountUserDN:
    Type:        String
    Description: "APIX.Hub needs service account to connect to organization's active directory. This is the username for that service account. For example 'jsmith' or 'CN=JSmith,OU=Sales,DC=Fabrikam,DC=COM'"

  ADServiceAccountPassword:
    Type:        String
    NoEcho:      True
    Description: "APIX.Hub needs service account to connect to organization's active directory. This is the password for that service account. "

  LoadBalancerCIDR:
    Type:        String
    Default:     0.0.0.0/0
    Description: "This makes ELB open to everyone and used for CloudFront integration. This setup relies on the default value to work, but you can customize it if you plan to access ELB directly from specific IP range."

  InstanceType:
    Type:    String
    AllowedValues:
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.12xlarge
      - c5.18xlarge
      - c5.24xlarge
      - c5.metal
      - c5a.large
      - c5a.xlarge
      - c5a.2xlarge
      - c5a.4xlarge
      - c5a.8xlarge
      - c5a.12xlarge
      - c5a.16xlarge
      - c5a.24xlarge
      - c5ad.large
      - c5ad.xlarge
      - c5ad.2xlarge
      - c5ad.4xlarge
      - c5ad.8xlarge
      - c5ad.12xlarge
      - c5ad.16xlarge
      - c5ad.24xlarge
      - c5d.large
      - c5d.xlarge
      - c5d.2xlarge
      - c5d.4xlarge
      - c5d.9xlarge
      - c5d.12xlarge
      - c5d.18xlarge
      - c5d.24xlarge
      - c5d.metal
      - c5n.large
      - c5n.xlarge
      - c5n.2xlarge
      - c5n.4xlarge
      - c5n.9xlarge
      - c5n.18xlarge
      - c5n.metal
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - m4.16xlarge
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.8xlarge
      - m5.12xlarge
      - m5.16xlarge
      - m5.24xlarge
      - m5.metal
      - m5a.large
      - m5a.xlarge
      - m5a.2xlarge
      - m5a.4xlarge
      - m5a.8xlarge
      - m5a.12xlarge
      - m5a.16xlarge
      - m5a.24xlarge
      - m5ad.large
      - m5ad.xlarge
      - m5ad.2xlarge
      - m5ad.4xlarge
      - m5ad.8xlarge
      - m5ad.12xlarge
      - m5ad.16xlarge
      - m5ad.24xlarge
      - m5d.large
      - m5d.xlarge
      - m5d.2xlarge
      - m5d.4xlarge
      - m5d.8xlarge
      - m5d.12xlarge
      - m5d.16xlarge
      - m5d.24xlarge
      - m5d.metal
      - m5dn.large
      - m5dn.xlarge
      - m5dn.2xlarge
      - m5dn.4xlarge
      - m5dn.8xlarge
      - m5dn.12xlarge
      - m5dn.16xlarge
      - m5dn.24xlarge
      - m5dn.metal
      - m5n.large
      - m5n.xlarge
      - m5n.2xlarge
      - m5n.4xlarge
      - m5n.8xlarge
      - m5n.12xlarge
      - m5n.16xlarge
      - m5n.24xlarge
      - m5n.metal
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - r5.large
      - r5.xlarge
      - r5.2xlarge
      - r5.4xlarge
      - r5.8xlarge
      - r5.12xlarge
      - r5.16xlarge
      - r5.24xlarge
      - r5.metal
      - r5a.large
      - r5a.xlarge
      - r5a.2xlarge
      - r5a.4xlarge
      - r5a.8xlarge
      - r5a.12xlarge
      - r5a.16xlarge
      - r5a.24xlarge
      - r5ad.large
      - r5ad.xlarge
      - r5ad.2xlarge
      - r5ad.4xlarge
      - r5ad.8xlarge
      - r5ad.12xlarge
      - r5ad.16xlarge
      - r5ad.24xlarge
      - r5d.large
      - r5d.xlarge
      - r5d.2xlarge
      - r5d.4xlarge
      - r5d.8xlarge
      - r5d.12xlarge
      - r5d.16xlarge
      - r5d.24xlarge
      - r5d.metal
      - r5dn.large
      - r5dn.xlarge
      - r5dn.2xlarge
      - r5dn.4xlarge
      - r5dn.8xlarge
      - r5dn.12xlarge
      - r5dn.16xlarge
      - r5dn.24xlarge
      - r5dn.metal
      - r5n.large
      - r5n.xlarge
      - r5n.2xlarge
      - r5n.4xlarge
      - r5n.8xlarge
      - r5n.12xlarge
      - r5n.16xlarge
      - r5n.24xlarge
      - r5n.metal
      - t2.medium
      - t2.large
      - t2.xlarge
      - t2.2xlarge
      - t3.medium
      - t3.large
      - t3.xlarge
      - t3.2xlarge
      - t3a.medium
      - t3a.large
      - t3a.xlarge
      - t3a.2xlarge
    Default: t3.medium

Mappings:
  RegionMap:
    us-east-1:
      HVM64: ami-0e2ff26a1ad79d7e8

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock:          10.192.0.0/16
      EnableDnsSupport:   true
      EnableDnsHostnames: true

  InternetGateway:
    Type: AWS::EC2::InternetGateway

  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref             VPC

  PublicSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref          VPC
      AvailabilityZone: !Select [ 0, !GetAZs '' ]
      CidrBlock:           10.192.10.0/24
      MapPublicIpOnLaunch: true

  PublicSubnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref          VPC
      AvailabilityZone: !Select [ 1, !GetAZs  '' ]
      CidrBlock:           10.192.11.0/24
      MapPublicIpOnLaunch: true

  PrivateSubnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref          VPC
      AvailabilityZone: !Select [ 0, !GetAZs  '' ]
      CidrBlock:           10.192.20.0/24
      MapPublicIpOnLaunch: false

  NatGateway1EIP:
    Type:      AWS::EC2::EIP
    DependsOn: InternetGatewayAttachment
    Properties:
      Domain: vpc

  NatGateway1:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatGateway1EIP.AllocationId
      SubnetId: !Ref        PublicSubnet1

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPublicRoute:
    Type:      AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref    PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref       InternetGateway

  PublicSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref     PublicSubnet1

  PublicSubnet2RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref     PublicSubnet2

  PrivateRouteTable1:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC

  DefaultPrivateRoute1:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref    PrivateRouteTable1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref    NatGateway1

  PrivateSubnet1RouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable1
      SubnetId: !Ref     PrivateSubnet1

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:        "ingress-sg"
      GroupDescription: "Security group with LB ingress rule"
      VpcId: !Ref       VPC
      SecurityGroupIngress:
        - CidrIp: !Ref LoadBalancerCIDR
          IpProtocol:   tcp
          ToPort:       80
          FromPort:     80
          Description: "LB ingress rule"
      SecurityGroupEgress:
        - CidrIp:       0.0.0.0/0
          IpProtocol:   "-1"

  SecurityGroup2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName:        "intermediate-sg"
      GroupDescription: "Security group for LB and EC2 connection"
      VpcId: !Ref       VPC
      SecurityGroupEgress:
        - CidrIp:       0.0.0.0/0
          IpProtocol:   "-1"

  SecurityGroup2Ingress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref               SecurityGroup2
      IpProtocol:                 "-1"
      SourceSecurityGroupId: !Ref SecurityGroup2

  SSMRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2RoleforSSM
      Path: "/"

  SSMInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      InstanceProfileName: SSMRole
      Path:                "/"
      Roles:
        - !Ref SSMRole

  EC2Instance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref       InstanceType
      ImageId: !FindInMap [ RegionMap, !Ref "AWS::Region", HVM64 ]
      SubnetId: !Ref           PrivateSubnet1
      SecurityGroupIds:
        - !Ref SecurityGroup2
      IamInstanceProfile: !Ref SSMInstanceProfile
      Tags:
        - Key:   Name
          Value: 'APIX-HUB'
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash -xe
          echo 'AD_SERVER_ADDRESS=${ADServerAddress}' >> /home/ubuntu/apix-backend/.env
          echo 'AD_USE_SSL=${ADUseSSL}' >> /home/ubuntu/apix-backend/.env
          echo 'AD_USE_STARTTLS=True' >> /home/ubuntu/apix-backend/.env
          echo 'AD_SEARCH_ROOT=${ADSearchRoot}' >> /home/ubuntu/apix-backend/.env
          echo 'AD_SERVICE_ACCOUNT_USER_DN=${ADServiceAccountUserDN}' >> /home/ubuntu/apix-backend/.env
          echo 'AD_SERVICE_ACCOUNT_PASS=${ADServiceAccountPassword}' >> /home/ubuntu/apix-backend/.env
          echo 'BOOTSTRAP_USER_EMAIL=${SuperUserEMAIL}' >> /home/ubuntu/apix-backend/.env
          echo 'BOOTSTRAP_USER_FIRST_NAME=${SuperUserFirstName}' >> /home/ubuntu/apix-backend/.env
          echo 'BOOTSTRAP_USER_LAST_NAME=${SuperUserLastName}' >> /home/ubuntu/apix-backend/.env
          echo 'BOOTSTRAP_USER_ORG_NAME=Default' >> /home/ubuntu/apix-backend/.env
          cd /home/ubuntu/apix-backend
          docker-compose up --no-start
          docker-compose start
          cd /home/ubuntu/apix-ui
          docker-compose up --no-start
          docker-compose start

  LoadBalancer:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Type:   application
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SecurityGroup
        - !Ref SecurityGroup2
      Subnets:
        - !Ref PublicSubnet1
        - !Ref PublicSubnet2
      Tags:
        - Key:   "Name"
          Value: InterfaceLoadBalancer

  LoadBalancerListener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      LoadBalancerArn: !Ref LoadBalancer
      Port:                 80
      Protocol:             HTTP
      DefaultActions:
        - Type:                forward
          TargetGroupArn: !Ref LoadBalancerTargetGroupPrimary

  LoadBalancerListenerRuleForUI:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type:                forward
          TargetGroupArn: !Ref LoadBalancerTargetGroupPrimary
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "*"
      ListenerArn: !Ref LoadBalancerListener
      Priority:         2

  LoadBalancerListenerRuleForAPI:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type:                forward
          TargetGroupArn: !Ref LoadBalancerTargetGroupSecondary
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - "/api/*"
      ListenerArn: !Ref LoadBalancerListener
      Priority:         1

  LoadBalancerTargetGroupPrimary:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port:                80
      Protocol:            HTTP
      Targets:
        - Id: !Ref EC2Instance
          Port:    8000
      TargetType:          instance
      VpcId: !Ref          VPC

      HealthCheckEnabled:  true
      HealthCheckPort:     "8000"
      HealthCheckProtocol: HTTP
      Tags:
        - Key:   "Name"
          Value: LoadBalancerTargetGroupPrimary

  LoadBalancerTargetGroupSecondary:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Port:                8080
      Protocol:            HTTP
      Targets:
        - Id: !Ref EC2Instance
          Port:    8080
      TargetType:          instance
      VpcId: !Ref          VPC

      HealthCheckEnabled:  true
      HealthCheckPort:     "8080"
      HealthCheckProtocol: HTTP
      Tags:
        - Key:   "Name"
          Value: LoadBalancerTargetGroupSecondary

  CloudFrontDistribution:
    Type: 'AWS::CloudFront::Distribution'
    Properties:
      DistributionConfig:
        Origins:
          - DomainName: !GetAtt 'LoadBalancer.DNSName'
            Id: !Ref            LoadBalancer
            CustomOriginConfig:
              HTTPPort:             80
              OriginProtocolPolicy: "http-only"
        Enabled: true
        DefaultCacheBehavior:
          AllowedMethods:
            - GET
            - HEAD
            - DELETE
            - OPTIONS
            - PATCH
            - POST
            - PUT
          TargetOriginId: !Ref  LoadBalancer
          ForwardedValues:
            QueryString: true
            Headers:
              - Accept-Encoding
              - Accept-Language
              - Authorization
            Cookies:
              Forward: all
          ViewerProtocolPolicy: redirect-to-https
        ViewerCertificate:
          CloudFrontDefaultCertificate: true

Outputs:
  APIXHubHost:
    Description:   Endpoint for Cloudfront Distribution
    Value: !GetAtt CloudFrontDistribution.DomainName

  APIXHubLoadBalancer:
    Description:   Endpoint for LoadBalancer
    Value: !GetAtt LoadBalancer.DNSName
